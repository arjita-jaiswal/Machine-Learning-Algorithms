# -*- coding: utf-8 -*-
"""PCA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/0B2PGrP1h1nsXVU9KVWpMelpTVm5JZmRsd3d2bnR2THNDZmxZ
"""

import numpy as np
import pandas as pd
from numpy import linalg as LA 
from scipy.io import loadmat

f1 = loadmat('PaviaU.mat')
f2 = loadmat('PaviaU_gt.mat')
data1=f1['paviaU']
data2=f2['paviaU_gt']
data2.shape
data1[0,0,:]

dataX=data1.reshape(-1,103)
x1,y1=dataX.shape
dataX[0,:]
data1=dataX
data1=data1-(1/x1)*np.sum(data1,axis=0)
data1.shape

dataY=data2.reshape(-1,1)
dataY.shape
out=dataY

W1=np.random.randn(26,y1)*np.sqrt(1/y1)
W1.shape
W1[:5,:]
bias1=np.random.randn(26,1)*np.sqrt(1/y1)

def sigmoid(data):
    return 1/(1+np.exp(-1*data))
def maximizer(data):
    return np.argmax(data,axis=1)

W2=np.random.randn(10,26)*np.sqrt(1/26)
W2.shape
bias2=np.random.randn(10,1)*np.sqrt(1/26)

def Forward_prop(W1,bias1,W2,bias2,data1):
    data2=np.dot(W1,data1.T)
    data2=data2+bias1
    act_data2=sigmoid(data2)
    x3,y3=act_data2.shape
    data3=np.dot(W2,act_data2)
    act_data3=sigmoid(data3).T
    return [act_data3,act_data2]

act_data3,act_data2=Forward_prop(W1,bias1,W2,bias2,data1)
prediction_final=maximizer(act_data3)
c=0
for i,j in zip(prediction_final,out):
    if i==j:
        c+=1
print(c/x1*100)

data_X=np.zeros((x1,10))
print(data_X.shape)
for i,j in zip(out,range(0,x1)):
    data_X[j,i%10]=1
data_X

alpha=0.99
loss=1/x1*np.sum(np.sum((act_data3-data_X)**2,axis=1),axis=0)
loss

def Backward_prop(act_data3,data_X,act_data2,W2,W1,bias1,bias2):
    dz2=act_data3-data_X
    for i in range(0,10):
        if i==0:
            dw2=np.sum(dz2[:,i].T*act_data2,axis=1)
            db2=np.sum(dz2[:,i],axis=0)
        else:
            x=np.sum(dz2[:,i].T*act_data2,axis=1)
            y=np.sum(dz2[:,i],axis=0)
            dw2=np.vstack((dw2,x))
            db2=np.vstack((db2,y))
    W2=W2-alpha*1/x1*dw2
    bias2=bias2-alpha*1/x1*db2
    dz1=np.dot(W2.T,dz2.T)*((act_data2*(1-act_data2)))
    dw1=np.dot(dz1,data1)
    db1=np.sum(dz1,axis=1)
    db1=db1.reshape(26,1)
    W1=W1-alpha*1/x1*dw1
    bias1=bias1-alpha*1/x1*db1
    return [W1,bias1,W2,bias2]

for i in range(0,30):
    W1,bias1,W2,bias2=Backward_prop(act_data3,data_X,act_data2,W2,W1,bias1,bias2)
    act_data3,act_data2=Forward_prop(W1,bias1,W2,bias2,data1)

acc=[]
prediction_final=maximizer(act_data3)
c=0
for i,j in zip(prediction_final,out):
    if i==j:
        c+=1
print(c/x1*100)
acc.append(c/x1*100)

loss=1/x1*np.sum(np.sum((act_data3-data_X)**2,axis=1),axis=0)
loss

l=[52, 26]
# for i in l:
w,v=LA.eig(np.dot(data1.T,data1))
eig=np.vstack((v,w))
srt_eig=eig[eig[-1,:].argsort()]
srt_eig

srt_eig[:,0]
eig[:,0]

basis=srt_eig[:,-75:-1]
basis1=np.hstack((basis,srt_eig[:,-1].reshape(-1,1)))
basis1.shape

data_fin=np.dot(data1,basis1)
x1,y1=data_fin.shape
data1=data_fin
data1=data1-(1/x1)*np.sum(data1,axis=0)

W1=np.random.randn(26,y1)*np.sqrt(1/y1)
W1.shape
W1[:5,:]
bias1=np.random.randn(26,1)*np.sqrt(1/y1)

W2=np.random.randn(10,26)*np.sqrt(1/26)
W2.shape
bias2=np.random.randn(10,1)*np.sqrt(1/26)

act_data3,act_data2=Forward_prop(W1,bias1,W2,bias2,data1)
prediction_final=maximizer(act_data3)
c=0
for i,j in zip(prediction_final,out):
    if i==j:
        c+=1
print(c/x1*100)

for i in range(0,30):
    W1,bias1,W2,bias2=Backward_prop(act_data3,data_X,act_data2,W2,W1,bias1,bias2)
    act_data3,act_data2=Forward_prop(W1,bias1,W2,bias2,data1)

prediction_final=maximizer(act_data3)
c=0
for i,j in zip(prediction_final,out):
    if i==j:
        c+=1
print(c/x1*100)
acc.append(c/x1*100)

f1 = scipy.io.loadmat('PaviaU.mat')
data1=f1['paviaU']
dataX=data1.reshape(-1,103)
x1,y1=dataX.shape
dataX[0,:]
data1=dataX

l=[52, 26]
for i in l:
    basis=srt_eig[:,-1*i:-1]
    basis1=np.hstack((basis,srt_eig[:,-1].reshape(-1,1)))
    basis1.shape
    data_fin=np.dot(data1,basis1)
    x1,y1=data_fin.shape
    data1=data_fin
    W1=np.random.randn(26,y1)*np.sqrt(1/y1)
    W1.shape
    W1[:5,:]
    bias1=np.random.randn(26,1)*np.sqrt(1/y1)
    W2=np.random.randn(10,26)*np.sqrt(1/26)
    W2.shape
    bias2=np.random.randn(10,1)*np.sqrt(1/26)
    act_data3,act_data2=Forward_prop(W1,bias1,W2,bias2,data1)
    prediction_final=maximizer(act_data3)
    c=0
    for i,j in zip(prediction_final,out):
        if i==j:
            c+=1
    print(c/x1*100)
    for i in range(0,30):
        W1,bias1,W2,bias2=Backward_prop(act_data3,data_X,act_data2,W2,W1,bias1,bias2)
        act_data3,act_data2=Forward_prop(W1,bias1,W2,bias2,data1)
    prediction_final=maximizer(act_data3)
    c=0
    for i,j in zip(prediction_final,out):
        if i==j:
            c+=1
    print(c/x1*100)
    acc.append(c/x1*100)
    f1 = scipy.io.loadmat('PaviaU.mat')
    data1=f1['paviaU']
    dataX=data1.reshape(-1,103)
    x1,y1=dataX.shape
    dataX[0,:]
    data1=dataX
    data1=data1-(1/x1)*np.sum(data1,axis=0)

l=[103,75,52,26]
import matplotlib.pyplot as plt
plt.plot(l,acc)
plt.xlabel('Num of Feature') 
plt.ylabel('Accuracy')
len(acc)

